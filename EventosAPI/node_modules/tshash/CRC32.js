"use strict";
// Standard CRC32 as generated by the 'crc32' Linux command
// Note that there are other variations on CRC32.
// Just because you're trying to match a 'CRC32', it might not be this.
// 
// I have no idea what I'm doing.  So yay for test vectors!
// This code was assembled based on pseudocode from various places.
var CRC32_TABLE = new Uint32Array(256);
{
    // Initialize the table
    var poly = 0xEDB88320; // 306674912;
    for (var n = 0; n < 256; ++n) {
        var c = n;
        for (var k = 0; k < 8; ++k) {
            c = (c & 1) ? poly ^ (c >>> 1) : (c >>> 1);
        }
        CRC32_TABLE[n] = c;
    }
}
var CRC32Hashing = (function () {
    function CRC32Hashing() {
        this.reset();
    }
    CRC32Hashing.prototype.reset = function () {
        this.crc = 0xFFFFFFFF;
    };
    CRC32Hashing.prototype.update = function (data) {
        var crc = this.crc;
        for (var i = 0; i < data.length; ++i) {
            crc = (crc >>> 8) ^ CRC32_TABLE[(crc ^ data[i]) & 0xFF];
        }
        this.crc = crc;
    };
    /**
     * Return the CRC32 as a SIGNED 32-bit integer.
     * It is signed because that's the natural behavior of Javascript's bitwise operators.
     */
    CRC32Hashing.prototype.digestToInt = function () {
        return this.crc ^ 0xFFFFFFFF;
    };
    CRC32Hashing.prototype.digest = function () {
        var crc = this.crc ^ 0xFFFFFFFF;
        var crcBuf = new Uint8Array(4);
        crcBuf[0] = (crc >> 24);
        crcBuf[1] = (crc >> 16);
        crcBuf[2] = (crc >> 8);
        crcBuf[3] = (crc >> 0);
        return crcBuf;
    };
    return CRC32Hashing;
}());
exports.CRC32Hashing = CRC32Hashing;
// You can use this if you're CRC32ing things in one go
exports.CRC32_HASHING_SINGLETON = new CRC32Hashing;
function crc32(data) {
    exports.CRC32_HASHING_SINGLETON.reset();
    exports.CRC32_HASHING_SINGLETON.update(data);
    return exports.CRC32_HASHING_SINGLETON.digestToInt();
}
exports.crc32 = crc32;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    newHashing: function () { return new CRC32Hashing; }
};
//# sourceMappingURL=CRC32.js.map